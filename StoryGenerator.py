import os
import google.generativeai as genai
import streamlit as st
from dotenv import load_dotenv
from google.api_core import retry

# Load environment variables
load_dotenv()

# Initial page configuration
st.set_page_config(page_title="Story Generator", layout="centered")

# Set background gradient and custom styles
st.markdown(
    """
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@400;700&display=swap');

    .main {
        background: linear-gradient(135deg, #1a1a1a 0%, #333333 100%);
        color: white;
        font-family: 'Plus Jakarta Sans', sans-serif;
        text-align: center;
    }
    h1, h2, h3 {
        color: #f0f0f0;
        font-weight: 700;
        text-align: center;
    }
    h1.sub-title {
        font-size: 0.8rem;
        color: #dcdcdc;
        margin-top: -10px;
    }
    .stButton button {
        background-color: #4CAF50; /* Softer green color */
        border-radius: 12px;
        color: white;
        padding: 10px 20px;
        font-size: 1.1em;
        box-shadow: 0 4px 12px rgba(0, 255, 0, 0.2);
        transition: background-color 0.3s ease, transform 0.2s ease;
    }
    .stButton button:hover {
        background-color: #388E3C;
        transform: translateY(-3px);
    }
    .stButtonSmall button {
        background-color: #FF8C00; /* New orange color for save/load buttons */
        border-radius: 8px;
        color: white;
        padding: 4px 10px; /* Two sizes smaller */
        font-size: 0.7em; /* Two sizes smaller */
        transition: background-color 0.3s ease;
        margin-left: 5px;
    }
    .step-description {
        font-size: 1.2em;
        color: #dcdcdc;
        margin-bottom: 20px;
        text-align: center;
    }
    .generated-text {
        text-align: justify;
        max-width: 600px;
        margin: 0 auto;
    }
    .contact-card {
        background-color: #293241;
        padding: 15px;
        border-radius: 12px;
        color: white;
        margin-top: 30px;
        text-align: center;
    }
    .contact-card a {
        color: #4CAF50;
        text-decoration: none;
        margin-right: 10px;
    }
    .copyright {
        margin-top: 30px;
        font-size: 0.9em;
        color: #dcdcdc;
        text-align: center;
    }
    .button-row {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
    }
    </style>
    """, unsafe_allow_html=True
)

# Title Section
st.title("üåü Story Generator")
st.markdown('<h1 class="sub-title">Powered by Google Gemini LLMs</h1>', unsafe_allow_html=True)

# Expanded introductory text
st.markdown("""
Welcome to the **Story Generator**! This app uses the latest **Google Gemini LLMs** to help you craft unique, AI-powered stories. Here's how it works:
1. **Choose Your LLM**: Select between **Gemini 1.5 Flash** for faster responses, or **Gemini 1.5 Pro** for more advanced outputs.
2. **Generate a Premise**: Pick a genre and let the AI create an exciting premise for your story.
3. **Build an Outline**: Structure your story with a detailed outline generated by the AI.
4. **Customize the Story**: Set the tone and complexity level to match your preferences.
5. **Continue Writing**: Guide the AI with inputs to flesh out the story step by step.
6. **Save/Load**: Save your progress and return later to continue writing.

Select your desired LLM below to begin the process:
""")

# Step 0: LLM Selection
llm_choice = st.selectbox("Choose the Gemini LLM:", ["Gemini 1.5 Flash", "Gemini 1.5 Pro"])

# Load the selected LLM model
if llm_choice == "Gemini 1.5 Flash":
    model = genai.GenerativeModel("gemini-1.5-flash")
elif llm_choice == "Gemini 1.5 Pro":
    model = genai.GenerativeModel("gemini-1.5-pro")

# After LLM selection, reveal the next step
st.markdown("---")

# Function to retry the story generation
def generate_with_retry(model, prompt):
    return model.generate_content(prompt, request_options={"retry": retry.Retry()})

# Initialize session state for premise, outline, and story
if 'premise' not in st.session_state:
    st.session_state['premise'] = ''
if 'outline' not in st.session_state:
    st.session_state['outline'] = ''
if 'story' not in st.session_state:
    st.session_state['story'] = ''

# Step 1: Generate Premise with Genre Options
st.subheader("üé¨ Step 1: Craft Your Premise")
st.markdown('<p class="step-description">Select a genre and generate a unique story premise.</p>', unsafe_allow_html=True)

col1, col2, col3 = st.columns(3)  # UI: Three buttons side by side

with col1:
    if st.button("üõ∏ Generate Sci-Fi Premise"):
        premise_prompt = f"You are an award-winning science fiction author...\nWrite a single sentence premise for a sci-fi story featuring cats."
        st.session_state['premise'] = generate_with_retry(model, premise_prompt).text
        st.success("Sci-Fi Premise Generated!")
        st.markdown(f'<p class="generated-text">{st.session_state["premise"]}</p>', unsafe_allow_html=True)

with col2:
    if st.button("üëª Generate Horror Premise"):
        premise_prompt = "You are an acclaimed horror writer...\nWrite a single sentence premise for a horror story involving an abandoned house."
        st.session_state['premise'] = generate_with_retry(model, premise_prompt).text
        st.success("Horror Premise Generated!")
        st.markdown(f'<p class="generated-text">{st.session_state["premise"]}</p>', unsafe_allow_html=True)

with col3:
    if st.button("üòÇ Generate Funny Premise"):
        premise_prompt = "You are a humorist known for hilarious tales...\nWrite a single sentence premise for a funny story about a talking dog."
        st.session_state['premise'] = generate_with_retry(model, premise_prompt).text
        st.success("Funny Premise Generated!")
        st.markdown(f'<p class="generated-text">{st.session_state["premise"]}</p>', unsafe_allow_html=True)

# Step 2: Generate Outline
if st.session_state['premise']:
    st.subheader("üìú Step 2: Build Your Outline")
    st.markdown('<p class="step-description">Generate a structured outline for your story based on the premise.</p>', unsafe_allow_html=True)
    if st.button("üìù Generate Outline"):
        outline_prompt = f"You have a gripping premise:\n{st.session_state['premise']}\nWrite an outline for the plot of your story."
        st.session_state['outline'] = generate_with_retry(model, outline_prompt).text
        st.success("Outline Generated!")
        st.markdown(f'<p class="generated-text">{st.session_state["outline"]}</p>', unsafe_allow_html=True)

# Step 3: Customize Story
if st.session_state['outline']:
    st.subheader("üé® Step 3: Customize Your Story")
    st.markdown('<p class="step-description">Set the tone and complexity of your story before starting the first draft.</p>', unsafe_allow_html=True)
    
    tone = st.selectbox("üîÆ Choose the tone of the story", ['Serious', 'Humorous', 'Dark', 'Inspirational'])
    complexity = st.slider("üß† Plot Complexity", 1, 10)

    persona_custom = f"You prefer to write in a {tone.lower()} tone with a plot complexity level of {complexity}."

    if st.button("üí° Generate First Draft"):
        starting_prompt = f"You have a gripping premise:\n{st.session_state['premise']}\nYour rich outline is:\n{st.session_state['outline']}\n{persona_custom}\nBegin the story."
        st.session_state['story'] = generate_with_retry(model, starting_prompt).text
        st.success("Story Draft Generated!")
        st.markdown(f'<p class="generated-text">{st.session_state["story"]}</p>', unsafe_allow_html=True)
        # st.markdown(f'<p class="generated-text">{st.session_state["story"]}</p>', unsafe_allow_html=True)

# Save and Load Functionality - Adjusted Button Placement
st.subheader("üíæ Save/Load Your Progress")
st.markdown('<div class="button-row">', unsafe_allow_html=True)

# Save Story Button
if st.button("üíæ Save Story", key="save_button"):
    with open('saved_story.txt', 'w') as f:
        f.write(st.session_state['story'])
    st.success("Story Saved!")

# Load Story Button
if st.button("üìÇ Load Story", key="load_button"):
    try:
        with open('saved_story.txt', 'r') as f:
            st.session_state['story'] = f.read()
        st.success("Story Loaded!")
        st.markdown(f'<p class="generated-text">{st.session_state["story"]}</p>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.error("No saved story found!")

st.markdown('</div>', unsafe_allow_html=True)

# Final Story Display
st.subheader("üìú Your Final Story")
st.markdown(f'<p class="generated-text">{st.session_state["story"]}</p>', unsafe_allow_html=True)

# Footer Section with Contact Info and Copyright
st.markdown("---")
st.markdown(
    """
    <div class="contact-card">
        <h3>Contact</h3>
        <p>üë®‚Äçüíª Created by Pratham Kuril</p>
        <p><a href="https://github.com/prathamkuril" target="_blank">GitHub</a> | <a href="https://www.linkedin.com/in/prathamkuril" target="_blank">LinkedIn</a></p>
    </div>
    <p class="copyright">¬© 2024 Pratham Kuril. All rights reserved.</p>
    """, unsafe_allow_html=True
)
